import Foundation
import XCTest
@testable import Decoder

class FunctionInterpretUInt64Test: XCTestCase {

  func testInterpretUInt64() {
    let bigEndianTestData: [Data: UInt64] = [
      Data(): 0,
      Data([0x00]): 0,
      Data([0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00, 0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]): 0,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]): 0,
      Data([0xFF]): 255,
      Data([0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0x00, 0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]): 255,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]): 255,
      Data([0xFF, 0xFF]): 65_535,
      Data([0x00, 0xFF, 0xFF]): 65_535,
      Data([0x00, 0x00, 0xFF, 0xFF]): 65_535,
      Data([0x00, 0x00, 0x00, 0xFF, 0xFF]): 65_535,
      Data([0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]): 65_535,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]): 65_535,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]): 65_535,
      Data([0xFF, 0xFF, 0xFF]): 16_777_215,
      Data([0x00, 0xFF, 0xFF, 0xFF]): 16_777_215,
      Data([0x00, 0x00, 0xFF, 0xFF, 0xFF]): 16_777_215,
      Data([0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF]): 16_777_215,
      Data([0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF]): 16_777_215,
      Data([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF]): 16_777_215,
    ]

    for (bytes, expected) in bigEndianTestData {
      guard let bigEndianPayload = interpretUInt64(bytes: bytes, sourceEndianness: .big) else {
        XCTFail("Should have been able to extract payload.")
        continue
      }
      guard let littleEndianPayload = interpretUInt64(bytes: Data(bytes.reversed()), sourceEndianness: .little) else {
        XCTFail("Should have been able to extract payload.")
        continue
      }
      switch bigEndianPayload {
        case .uInt64(let actual): XCTAssertEqual(expected, actual)
        default:                  XCTFail("Should have resolved a UInt64 payload.")
      }
      switch littleEndianPayload {
        case .uInt64(let actual): XCTAssertEqual(expected, actual)
        default:                  XCTFail("Should have resolved a UInt64 payload.")
      }
    }
  }

}
